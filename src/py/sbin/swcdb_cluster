#!/usr/bin/env python3
# -- coding: utf-8 --
# SWC-DBÂ© Copyright since 2019 Alex Kashirin <kashirin.alex@gmail.com>
# License details at <https://github.com/kashirin-alex/swc-db/#license>


import os
import sys
import time
import ipaddress
import fabric
import fabric.main
import fabric.executor
#


# swcdb_cluster configurations


swcdb_install_path = os.path.abspath(
    os.path.dirname(os.path.abspath(__file__)) + "/..")

swcdb_cfg = {
    "swc.cfg.path": [swcdb_install_path + "/etc/swcdb/"],
    "swc.logging.path": [swcdb_install_path + "/var/log/swcdb/"]
}

swcdb_source_host = os.uname().nodename
swcdb_remote_hosts = []
swcdb_fsbrokers = []


def swcdb_get_config(filepath):
    with open(filepath, 'r') as fd:
        for line in fd.read().splitlines():
            line = line.strip()
            if line.startswith("#") or "=" not in line:
                continue
            n, v = line.split("#")[0].split("=")
            n = n.strip()
            if n not in swcdb_cfg:
                swcdb_cfg[n] = []
            swcdb_cfg[n].append(v.strip())
    #


def swcdb_set_hosts(swcdb_role):
    for i, data in enumerate(swcdb_cfg[swcdb_role]):
        data = [s.strip() for s in data.split("|")]

        if data[0].startswith("{"):
            data.pop(0)
        if data[0].startswith("["):
            data.pop(0)

        default = data[0].lower() == "default"
        if default:
            data.pop(0)

        port = "" if len(data) == 1 else data[1]
        addrs = []
        host = None
        for addr in data[0].split(","):
            try:
                ipaddress.IPv4Address(u'' + addr)
                addrs.append(addr)
            except:
                try:
                    ipaddress.IPv6Address(u'' + addr)
                    addrs.append(addr)
                except:
                    host = addr
                    break
        swcdb_cfg[swcdb_role][i] = [
            addrs[0] if addrs else host,
            [addr + ("-" if port else "") + port for addr in addrs] if addrs and not default else None,
            (host + (":" if port else "") + port) if host and not default else None
        ]
    #


def swcdb_read_config():
    global swcdb_fsbrokers, swcdb_remote_hosts

    swcdb_get_config(swcdb_cfg["swc.cfg.path"][-1] + "swc.cfg")
    if "swc.cfg.dyn" in swcdb_cfg:
        swcdb_get_config(("" if swcdb_cfg["swc.cfg.dyn"][0].startswith("/") else swcdb_cfg["swc.cfg.path"][-1]) +
                         "/" + swcdb_cfg["swc.cfg.dyn"][0])
    # define hosts swcdb_cfg[role] = [(ssh-addr, [addresses], host)]

    # set managers (ssh-addr, [addresses], host)
    swcdb_set_hosts("swc.mngr.host")

    # read & set [Rangers, ThriftBrokers, Additional FsBrokers]
    swcdb_get_config(swcdb_cfg["swc.cfg.path"][-1] + "swc.cluster.cfg")
    for role in ["swc.cluster.rgr.host", "swc.cluster.thriftbroker.host", "swc.cluster.fsbroker.host"]:
        if role not in swcdb_cfg:
            swcdb_cfg[role] = []
            continue
        swcdb_set_hosts(role)

    for cfg in swcdb_cfg["swc.cluster.thriftbroker.host"]: # thriftbroker defaults on localhost
        if not cfg[1] and not cfg[2]:
            cfg[2] = "localhost"

    # [host, ]
    swcdb_fsbrokers += list(set(
        [cfg[0] for cfg in swcdb_cfg["swc.mngr.host"]] +
        [cfg[0] for cfg in swcdb_cfg["swc.cluster.rgr.host"]] +
        [cfg[0] for cfg in swcdb_cfg["swc.cluster.fsbroker.host"]]
    ))
    swcdb_remote_hosts += list(set(
        host for host in [cfg[0] for cfg in swcdb_cfg["swc.cluster.thriftbroker.host"]] + swcdb_fsbrokers
        if host not in [swcdb_source_host, "localhost"]
    ))

    swcdb_cfg["swc.cluster.role.delay.start"] = int(
        swcdb_cfg.get("swc.cluster.role.delay.start", [2])[0])
    #

# end configurations


# common-utils

def swcdb_common_options(daemon=True):
    opts = []
    if daemon:
        opts.append("--daemon")
    for n in ["swc.cfg.path", "swc.logging.path"]:
        if len(swcdb_cfg[n]) > 1:
            opts.append("--" + n + "=" + swcdb_cfg[n][-1])
    return opts
    #


def swcdb_print_start(task, c):
    print(task + " S(" + c.host + ":" + str(c.port) + ")")
    #


def swcdb_print_result(task, c, r):
    print(task + " R(" + c.host + ":" + str(c.port) + "): " + r)
    #


def swcdb_print_finish(task, c):
    print(task + " F(" + c.host + ":" + str(c.port) + ")")
    #


def swcdb_print(task, c, res=None):
    swcdb_print_start(task, c)
    if res:
        for o in res.stdout.strip().split("\n") + res.stderr.strip().split("\n"):
            if o:
                swcdb_print_result(task, c, o)
    swcdb_print_finish(task, c)
    #


def swcdb_proc_pids(name, c):
    res = c.run(" | ".join([
        "ps aux",
        "grep -E \"[0-9]\s" + swcdb_install_path + "/bin/" + name + "\"",
        "tr -s ' '", "cut -f2 -d' '"]),
        hide=True)
    return [pid for pid in res.stdout.strip().split("\n") if pid]
    #


def swcdb_stop_proc(task, name, c, gracefull):
    swcdb_print_start(task, c)
    pids = swcdb_proc_pids(name, c)
    for pid in pids:
        kres = c.run("kill " + ("" if gracefull else "-9 ") + pid, hide=True)
        swcdb_print_result(
            task, c,
            ("SIGINT" if gracefull else "SIGTERM") + " pid(" + pid + ") " +
            kres.stdout.strip() + " " +
            kres.stderr.strip()
        )

    if pids:
        check = 0
        time.sleep(1)
        while swcdb_proc_pids(name, c):
            check += 1
            swcdb_print_result(task, c, "wait check=" + str(check))
            time.sleep(2)
    else:
        swcdb_print_result(task, c, "not-running")
    swcdb_print_finish(task, c)
    #


@fabric.task(hosts=[swcdb_source_host])
def wait_ready(c, on_start=False):
    swcdb_print_start("wait-ready", c)
    if on_start:
        time.sleep(5)
    confirm = False
    check = 1
    while True:
        res = c.local(' '.join([
            "echo 'cluster;quit;'",
            "| "+swcdb_install_path+"/bin/swcdb --mngr --quiet -l=warn"] +
            swcdb_common_options(False) + [";"] ),
                hide=True)
        code = ""
        for s in res.stdout.strip().split("\n"):
            if s.startswith("code="):
                code = s
                break;
        if not confirm:
            print("cluster-status check=" + str(check) + ":" +
                  " rslt=(" + (code if code else ("NO-CODE - " + res.stdout)) + ")")
        if code.startswith("code=0 "):
            if confirm:
                break
            confirm = True
            time.sleep(1)
            continue
        elif confirm:
            confirm = False
        time.sleep(3)
        check += 1
    swcdb_print_finish("wait-ready", c)
    #


# DEPLOY


@fabric.task(hosts=[swcdb_source_host])
def deploy(ctx):
    if swcdb_install_path == "/usr":
        raise Exception("Deploy not supported for installs on OS base path")

    swcdb_print_start("deployment", ctx)

    get_archive = swcdb_cfg["swc.install.archive"][-1] if "swc.install.archive" in swcdb_cfg \
                  and (swcdb_cfg["swc.install.archive"][-1].startswith("http://") or
                       swcdb_cfg["swc.install.archive"][-1].startswith("https://")) else None
    if get_archive:
        ctx.local("mkdir -p /tmp/swcdb")
        ctx.local("".join(["wget", " -O", " /tmp/swcdb/", get_archive.split("/")[-1],
                           " ", swcdb_cfg["swc.install.archive"][-1]]))
        swcdb_cfg["swc.install.archive"][-1] = "/tmp/swcdb/" + get_archive.split("/")[-1]

    ctx.local("mkdir -p " + swcdb_install_path + "/run")
    ctx.local("mkdir -p " + swcdb_cfg["swc.logging.path"][-1])

    for host in swcdb_remote_hosts:
        with fabric.Connection(host) as c:
            deploy_host(c)

    if get_archive:
        ctx.local("rm -rf /tmp/swcdb")
        swcdb_cfg["swc.install.archive"][-1] = get_archive

    swcdb_print_finish("deployment", ctx)
    #


def deploy_host(c):
    swcdb_print_start("deploy", c)

    c.run("mkdir -p " + swcdb_cfg["swc.logging.path"][-1])
    c.run("mkdir -p " + swcdb_install_path + "/run")
    cp_dirs = ["etc"]

    if "swc.install.archive" in swcdb_cfg:
        c.run("mkdir -p " + swcdb_install_path)
        c.run("mkdir -p /tmp/swcdb")
        c.put(swcdb_cfg["swc.install.archive"][-1], "/tmp/swcdb/")
        c.run("tar -xf /tmp/swcdb/" + swcdb_cfg["swc.install.archive"][-1].split("/")[-1] + " -C " + swcdb_install_path)
        c.run("rm -rf " + swcdb_install_path + "/etc")
        c.run("rm -rf /tmp/swcdb")
    else:
        cp_dirs += ["sbin", "bin", "etc", "lib", "include"]

    for dir in cp_dirs:
        for dpath, _, filenames in os.walk(swcdb_install_path + "/" + dir):
            c.run("mkdir -p " + dpath)
            for fname in filenames:
                c.put(dpath + "/" + fname, dpath + "/" + fname, preserve_mode=True)

    swcdb_print_finish("deploy", c)
    #


@fabric.task
def push_config(ctx):
    for host in swcdb_remote_hosts:
        with fabric.Connection(host) as c:
            push_config_host(c)
    #


def push_config_host(c):
    swcdb_print_start("push_config", c)
    for dpath, _, filenames in os.walk(swcdb_cfg["swc.cfg.path"][-1]):
        c.run("mkdir -p " + dpath)
        for fname in filenames:
            c.put(dpath + "/" + fname, dpath + "/" + fname, preserve_mode=True)
    swcdb_print_finish("push_config", c)
    #


# swcdbFsBroker

@fabric.task
def start_fsbrokers(c):
    opts = swcdb_common_options()
    for saddr, addrs, host in swcdb_cfg["swc.cluster.fsbroker.host"]:
        with fabric.Connection(saddr) as c:
            swcdb_print("start-fsbrokers", c, c.run(
                " ".join([
                    'source /etc/profile;',
                    swcdb_install_path+"/bin/swcdbFsBroker",
                    ((" --host=" + host) if host else "".join([" --addr=" + addr for addr in addrs]) if addrs else "")
                ] + opts),
                hide=True)
            )
    #

# @fabric.task , good for equal command
# def start_fsbrokers(c):
#    results = fabric.ThreadingGroup(*swcdb_fsbrokers).run(
#        " ".join([swcdb_install_path+"/bin/swcdbFsBroker", "--daemon"]),
#        hide=True
#    )
#    for c in results:
#        swcdb_print("start-fsbrokers", c, results[c]


@fabric.task
def stop_fsbrokers(c):
    for host in swcdb_fsbrokers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("stop-fsbrokers", "swcdbFsBroker", c, True)
    #

@fabric.task
def kill_fsbrokers(c):
    for host in swcdb_fsbrokers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("kill-fsbrokers", "swcdbFsBroker", c, False)
    #


# swcdbManager

@fabric.task
def start_managers(c):
    opts = swcdb_common_options()
    for saddr, addrs, host in swcdb_cfg["swc.mngr.host"]:
        with fabric.Connection(saddr) as c:
            swcdb_print("start-managers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbManager",
                    ((" --host=" + host) if host else "".join([" --addr=" + addr for addr in addrs]) if addrs else "")
                ] + opts),
                hide=True)
            )
    #


@fabric.task
def stop_managers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.mngr.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("stop-managers", "swcdbManager", c, True)
    #

@fabric.task
def kill_managers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.mngr.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("kill-managers", "swcdbManager", c, False)
    #


# swcdbRanger

@fabric.task
def start_rangers(c):
    opts = swcdb_common_options()
    for saddr, addrs, host in swcdb_cfg["swc.cluster.rgr.host"]:
        with fabric.Connection(saddr) as c:
            swcdb_print("start-rangers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbRanger",
                    ((" --host=" + host) if host else "".join([" --addr=" + addr for addr in addrs]) if addrs else "")
                ] + opts),
                hide=True)
            )
    #


@fabric.task
def stop_rangers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.cluster.rgr.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("stop-rangers", "swcdbRanger", c, True)
    #

@fabric.task
def kill_rangers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.cluster.rgr.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("kill-rangers", "swcdbRanger", c, False)
    #


# swcdbThriftBroker

@fabric.task
def start_thriftbrokers(c):
    opts = swcdb_common_options()
    for saddr, addrs, host in swcdb_cfg["swc.cluster.thriftbroker.host"]:
        with fabric.Connection(saddr) as c:
            swcdb_print("start-thriftbrokers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbThriftBroker",
                    ((" --host=" + host) if host else "".join([" --addr=" + addr for addr in addrs]) if addrs else "")
                ] + opts),
                hide=True)
            )
    #


@fabric.task
def stop_thriftbrokers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.cluster.thriftbroker.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("stop-thriftbrokers", "swcdbThriftBroker", c, True)
    #

@fabric.task
def kill_thriftbrokers(c):
    for saddr in set(cfg[0] for cfg in swcdb_cfg["swc.cluster.thriftbroker.host"]):
        with fabric.Connection(saddr) as c:
            swcdb_stop_proc("kill-thriftbrokers", "swcdbThriftBroker", c, False)
    #


# START

@fabric.task(hosts=[swcdb_source_host])
def start(c):
    for name, run in [
            ("fsbrokers",       start_fsbrokers),
            ("managers",        start_managers),
            ("rangers",         start_rangers),
            ("thriftbrokers",   start_thriftbrokers)]:
        print("-- starting " + name + " --")
        run(c)
        time.sleep(swcdb_cfg["swc.cluster.role.delay.start"])

    print("-- wait for ready --")
    wait_ready(c, True)
    #


# STOP

@fabric.task
def stop(c):
    for name, run in [
            ("thriftbrokers",   stop_thriftbrokers),
            ("rangers",         stop_rangers),
            ("managers",        stop_managers),
            ("fsbrokers",       stop_fsbrokers)]:
        print("-- stopping " + name + " --")
        run(c)
    #


# KILL

@fabric.task
def kill(c):
    for name, run in [
            ("thriftbrokers",   kill_thriftbrokers),
            ("rangers",         kill_rangers),
            ("managers",        kill_managers),
            ("fsbrokers",       kill_fsbrokers)]:
        print("-- killing " + name + " --")
        run(c)
    #

# @fabric.task(hosts=[swcdb_cfg["swc.mngr.host"][0]]) -- root mngr
# def stop(c):
# ./swcdb -manager stop_cluster
#


# SHELL
@fabric.task
def shell(c):
    while True:
        cmd = input("# ")
        if not cmd.strip() or cmd.startswith("\x1b"):
            continue
        if cmd.lower().strip() in ["q", "quit", "q;", "quit;"]:
            break

        results = fabric.ThreadingGroup(
            *(swcdb_remote_hosts + [swcdb_source_host])
        ).run(cmd, hide=True)

        for c in results:
            print("on (" + c.host + ":" + str(c.port) + "): ")
            for o in results[c].stdout.strip().split("\n") + results[c].stderr.strip().split("\n"):
                if o:
                    print("  ", o)
    #


#
class SwcDbClusterProgram(fabric.main.Fab):
    def core_args(self):
        return fabric.main.Fab.core_args(self) + [
            fabric.main.Argument(
                names=("swc.", ),
                help="SWC-DB cfg arguments correspond to configurable swc.*=value",
            )
        ]
        #
#

if __name__ == '__main__':
    for i, data in enumerate(sys.argv):
        if not data.startswith("--swc"):
            continue
        sys.argv.pop(i)
        n, v = data.split("=")
        n = n.strip()[2:]
        v = v.strip()
        if n not in swcdb_cfg:
            swcdb_cfg[n] = []
        if v not in swcdb_cfg[n]:
            swcdb_cfg[n].append(v)
    swcdb_read_config()
    
    if 'SWCDB_CLUSTER_SSH_CONFIG' in os.environ:
        sys.argv.append((--ssh-config, os.environ['SWCDB_CLUSTER_SSH_CONFIG'))
                                                  
    SwcDbClusterProgram(
        name="swcdb_cluster",
        namespace=fabric.main.Collection.from_module(sys.modules[__name__]),
        version='0.0.1',

        executor_class=fabric.executor.Executor,
        config_class=fabric.Config
    ).run()
