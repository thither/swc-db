name: CMake

on:
  push:
    branches: [ CICmake ]
  pull_request:
    branches: [ CICmake ]
    # paths:
    #  - 'src/*'
  schedule:
    - cron: '26 4 * * 6'


jobs:

  main:
    if: "contains(github.event.head_commit.message, '[TEST COMMIT]')"

    strategy:
      fail-fast: false
      matrix:
        runs-on:      ['ubuntu-20.04']
        build_type:   ['Release']
        O_LEVEL:      ['3', '6']
        IMPL_SOURCE:  ['ON', 'OFF']
        THRIFT:       ['0.14.0']

    runs-on: ${{ matrix.runs-on }}
    
    name: ${{ matrix.runs-on }} ${{ matrix.build_type }} O(${{ matrix.O_LEVEL }}) IMPL(${{ matrix.IMPL_SOURCE }})
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Config SSH connection to localhost
      # sudo apt update; sudo apt -y install openssh-server
      run: |
        mkdir -p ~/.ssh/
        ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa
        cat ~/.ssh/id_rsa.pub | tee -a ~/.ssh/authorized_keys
        ssh-keyscan -t rsa localhost,ip6-localhost,localhost.localdomain,::1,::,127.0.0.1 >> ~/.ssh/known_hosts;
        chmod 600 ~/.ssh/authorized_keys
        #
        cat > sshd_config <<EOF
          PermitRootLogin yes
          ChallengeResponseAuthentication no
          UsePAM yes
          AuthorizedKeysFile `realpath ~/.ssh/authorized_keys`
          AcceptEnv LANG LC_*
          X11Forwarding yes
          PrintMotd no
          Banner none
          DebianBanner no
        EOF
        sudo mv sshd_config /etc/ssh/sshd_config
        #
        cat > ~/.ssh/config <<EOF
          Host *
          SendEnv LANG LC_*
          HashKnownHosts no
          GSSAPIAuthentication yes
        EOF
        sudo cp ~/.ssh/config /etc/ssh/ssh_config
        #
        sudo systemctl restart ssh
        #
        chmod 700 ~/.ssh
        sudo chmod -c 0755 ~/
        ls -la ~/.ssh
        ssh localhost "echo 'SSH connection to localhost is OK user='$(whoami)";

    - name: Install Dependencies
      run: |
        git clone --branch asio-1-18-1 https://github.com/chriskohlhoff/asio.git
        if [[ ${{ matrix.runs-on }} =~ ^ubuntu-* ]]; then 
          # CORE-PREREQUISITES
          sudo apt-get install -y \
            libgoogle-perftools-dev \
            libre2-dev \
            zlib1g-dev \
            libsnappy-dev \
            libzstd-dev \
            libssl-dev \
            libreadline-dev
          #
        fi        
        if [ ${{ matrix.runs-on }} == 'ubuntu-20.04' ]; then 
          # THRIFT-PREREQUISITES
          sudo apt-get install -y \
            libboost-math-dev \
            libevent-dev \
            libthrift-dev
          #
          # THRIFT-C_GLIB-PREREQUISITES
          sudo apt-get install -y \
            libthrift-c-glib-dev \
            libpam-dev
          #
        fi
        
        # SWCDB_CLUSTER-PREREQUISITES
        sudo apt-get install -y \
          python3-pip
        sudo pip3 install fabric
        #
        
        cmake -E make_directory ${{github.workspace}}/build

    - name: Configure
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
          sudo cmake $GITHUB_WORKSPACE \
            -DO_LEVEL=${{ matrix.O_LEVEL }} \
            -DSWC_IMPL_SOURCE=${{ matrix.IMPL_SOURCE }} \
            -DSWC_LANGUAGES=NONE \
            -DTHRIFT_VERSION=${{ matrix.THRIFT }} \
            -DASIO_INCLUDE_PATH=${{github.workspace}}/asio/asio/include \
            -DGLIB_INCLUDE_PATH="$(pkg-config --cflags glib-2.0 | tr ' ' ';' | sed 's/-I//g' )" \
            -DCMAKE_SKIP_RPATH=OFF \
            -DCMAKE_INSTALL_PREFIX=/opt/swcdb \
            -DSWC_DOCUMENTATION=OFF \
            -DSWC_INSTALL_DEP_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
  

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: sudo cmake --build . -j$((`grep -c processor < /proc/cpuinfo || echo 1`)) --config ${{ matrix.build_type }}


    - name: Install
      working-directory: ${{github.workspace}}/build
      run: sudo cmake --install . --config ${{ matrix.build_type }}


    - name: Test - integration
      working-directory: ${{github.workspace}}/build/tests/integration/
      shell: bash

    #- name: Test
    #  working-directory: ${{github.workspace}}/build/
    #  shell: bash
    #  run: sudo ctest --output-on-failure -C ${{ matrix.build_type }}
      
    #- name: Test - libswcdb_core
    #  working-directory: ${{github.workspace}}/build/tests/libswcdb_core/
    #  shell: bash
    #  run: sudo ctest --output-on-failure -C ${{ matrix.build_type }}

    #- name: Test - libswcdb
    #  working-directory: ${{github.workspace}}/build/tests/libswcdb/
    #  shell: bash
    #  run: sudo ctest --output-on-failure -C ${{ matrix.build_type }}

    #- name: Test - integration
    #  working-directory: ${{github.workspace}}/build/tests/integration/
    #  shell: bash
    #  run: |
    #    sudo ctest --output-on-failure -C ${{ matrix.build_type }}
